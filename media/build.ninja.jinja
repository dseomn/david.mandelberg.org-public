{#
 # SPDX-FileCopyrightText: 2025 David Mandelberg <david@mandelberg.org>
 #
 # SPDX-License-Identifier: Apache-2.0
 #}

{% set media = ginjarator.py.import_("dseomn_website.media") %}

{% import "include/cache_buster.ninja.jinja" as cache_buster %}

{{ cache_buster.rules }}

rule image_convert
  command = in=$in; out=$out; $conversion_command
  description = CONVERT $in ($conversion)

rule image_metadata
  command = magick -define json:version=1.0 $in $out
  description = METADATA $in

{% for source, image_outputs in media.image_outputs_by_source().items() %}
{% set work_dir = (image_outputs | first).work_path.parent %}
{% set converted_filenames = [] %}

{% for image_output in image_outputs %}
{% do ginjarator.py.assert_(image_output.work_path.parent == work_dir) %}
{% do converted_filenames.append(image_output.work_path.name) %}
build $
    {{ ginjarator.to_ninja(image_output.work_path) }} $
    : $
    image_convert $
    {{ ginjarator.to_ninja(source) }}
  conversion = {{
    ginjarator.to_ninja(image_output.conversion.work_suffix.lstrip("-"))
  }}
  conversion_command = $
    {{ ginjarator.to_ninja(image_output.conversion.sh_command) }}
build $
    {{ ginjarator.to_ninja(image_output.metadata_path) }} $
    : $
    image_metadata $
    {{ ginjarator.to_ninja(image_output.work_path) }}
{{ cache_buster.hash(
  input_dir=work_dir | string,
  input_filename=image_output.work_path.name,
  work_dir=work_dir | string,
  output_filename_base=image_output.output_filename_base,
  image=true,
) }}
{% endfor %}

{{ cache_buster.copy(
  input_dir=work_dir | string,
  input_filenames=converted_filenames,
  work_dir=work_dir | string,
  work_filename_base=source.name,
) }}
{% endfor %}
