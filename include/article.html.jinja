{#
 # SPDX-FileCopyrightText: 2025 David Mandelberg <david@mandelberg.org>
 #
 # SPDX-License-Identifier: Apache-2.0
 #}

{% set textwrap = ginjarator.py.import_("textwrap") %}

{% set headings = ginjarator.py.import_("dseomn_website.headings") %}
{% set iri = ginjarator.py.import_("dseomn_website.iri") %}
{% set lint = ginjarator.py.import_("dseomn_website.lint") %}
{% set metadata = ginjarator.py.import_("dseomn_website.metadata") %}
{% set minify = ginjarator.py.import_("dseomn_website.minify") %}

{% import "include/base_html.html.jinja" as base_html %}

{% macro _a_author(author) -%}
  {%- if author.uri is none -%}
    <bdi>{{ author.name | e }}</bdi>
  {%- else -%}
    <a href="{{ author.uri | e }}" rel="author">
      {#- #}<bdi>{{ author.name | e }}</bdi>{# -#}
    </a>
  {%- endif -%}
{%- endmacro %}

{% macro standalone(
  extra_head=""
) %}
  {% set standalone_metadata = metadata.Standalone.load(
    ginjarator.current_template
  ) %}
  {% set fragment %}
    <article class="article">
      <h1>{{ standalone_metadata.title | e }}</h1>
      {{ caller() }}
    </article>
  {% endset %}
  {% call base_html.write(
    page_metadata=standalone_metadata,
    extra_head=extra_head,
  ) %}
    {{ headings.article(fragment) }}
  {% endcall %}
{% endmacro %}

{% macro _reply(parent_metadata, top_level) %}
  {% set to = metadata.SITE.author.email_address_with_extension(
    "website-reply-to-" + parent_metadata.uuid | string
  ) %}
  {% set subject = "Re: " + parent_metadata.url %}
  {% set body_indented %}
    Name: the name you want on the comment
    URI (optional): what your name should be a link to

    Comment:
    your comment here
  {% endset %}
  {% set body = textwrap.dedent(body_indented).strip() %}
  {% set email_link -%}
    <a href="{{ iri.mailto(to, headers={"subject": subject}, body=body) | e }}">
      {{- to | e -}}
    </a>
  {%- endset %}
  {% if top_level %}
    <p>
      To reply, send a comment to {{ email_link }} along with your name as you
      want it to appear and optionally a URI to link your name to.
      {% if parent_metadata.author.email_address is not none %}
        {% set private_mailto = iri.mailto(
          parent_metadata.author.email_address,
          headers={"subject": subject},
        ) %}
        Or, send a private reply to <a href="{{ private_mailto | e }}">{{
        parent_metadata.author.email_address | e }}</a>.
      {% endif %}
    </p>
  {% else %}
    <p>Reply: {{ email_link }}</p>
  {% endif %}
{% endmacro %}

{% macro _comments(post_metadata, comments_metadata) %}
  {% for comment_metadata in comments_metadata %}
    <article class="comment" id="{{ comment_metadata.id | e }}">
      <div class="comment-main">
        <header class="comment-header">
          <h3 class="comment-header-author">
            {{ _a_author(comment_metadata.author) }}
          </h3>
          <p class="comment-header-published">
            <a href="{{ comment_metadata.url_path | e }}" rel="bookmark">
              {{ base_html.time_from_datetime(comment_metadata.published) }}
            </a>
          </p>
        </header>
        {% set contents = ginjarator.fs.read_text(
          comment_metadata.contents_path
        ) %}
        {% if contents is not none %}
          {% do lint.comment(contents) %}
          <div dir="auto">
            {{ contents }}
          </div>
        {% endif %}
      </div>
      <div class="comment-replies">
        {{ _reply(parent_metadata=comment_metadata, top_level=false) }}
        {{ _comments(
          post_metadata=post_metadata,
          comments_metadata=post_metadata.comments_by_parent[
            comment_metadata.uuid
          ],
        ) }}
      </div>
    </article>
  {% endfor %}
{% endmacro %}

{% macro _post_fragment(
  post_metadata,
  contents
) %}
  <article class="article" id="{{ post_metadata.id | e }}">
    <header class="article-header">
      <h1 class="article-header-title">{{ post_metadata.title | e }}</h1>
      <dl class="article-header-metadata">
        <div class="article-header-metadata-item">
          <dt class="article-header-metadata-key">
            <span aria-label="date" role="img">üìÖ</span>
          </dt>
          <dd
              class="article-header-metadata-value
                     article-header-metadata-numeric"
              >
            <a rel="bookmark" href="{{ post_metadata.url_path | e }}">
              {{ base_html.time_from_datetime(post_metadata.published) }}
            </a>
          </dd>
        </div>
        <div class="article-header-metadata-item">
          <dt class="article-header-metadata-key">
            <span aria-label="author" role="img">üë§</span>
          </dt>
          <dd  class="article-header-metadata-value">
            {{ _a_author(post_metadata.author) }}
          </dd>
        </div>
        {% if post_metadata.tags %}
          <div class="article-header-metadata-item">
            <dt class="article-header-metadata-key">
              <span aria-label="tags" role="img">üè∑Ô∏è</span>
            </dt>
            <dd class="article-header-metadata-value">
              {% set tag_joiner = joiner(", ") %}
              {% for tag in post_metadata.tags -%}
                {{- tag_joiner() -}}
                <a href="/tag/{{ tag | e }}/" rel="tag">{{ tag | e }}</a>
              {%- endfor %}
            </dd>
          </div>
        {% endif %}
      </dl>
    </header>
    {{ contents }}
    <section class="comments">
      <header>
        <h2>Comments</h2>
        {{ _reply(parent_metadata=post_metadata, top_level=true) }}
      </header>
      {{ _comments(
        post_metadata=post_metadata,
        comments_metadata=post_metadata.comments_by_parent[none],
      ) }}
    </section>
  </article>
{% endmacro %}

{% macro post() %}
  {% set post_metadata = metadata.Post.load(ginjarator.current_template) %}
  {% set extra_head %}
    <meta
        property="article:published_time"
        content="{{ post_metadata.published.isoformat() | e }}"
        >
    {% for tag in post_metadata.tags %}
      <meta property="article:tag" content="{{ tag | e }}">
    {% endfor %}
    <meta property="og:type" content="article">
  {% endset %}
  {% set contents = caller() %}
  {% set fragment = _post_fragment(
    post_metadata=post_metadata,
    contents=contents,
  ) %}
  {% call base_html.write(
    page_metadata=post_metadata,
    extra_head=extra_head,
  ) %}
    {{ headings.article(fragment) }}
  {% endcall %}
  {% do ginjarator.fs.write_text(
    post_metadata.include_fragment_path,
    headings.article(fragment, offset=1),
  ) %}
  {% call ginjarator.fs.write_text_macro(post_metadata.atom_fragment_path) %}
    <entry>
      <author><name>{{ post_metadata.author.name | e }}</name></author>
      {% for tag in post_metadata.tags %}
        <category term="{{ tag | e }}"/>
      {% endfor %}
      <content type="html">{{ minify.html(contents) | e }}</content>
      <id>{{ post_metadata.uuid.urn | e }}</id>
      <link href="{{ post_metadata.url_path | e }}" rel="alternate"/>
      <published>{{ post_metadata.published.isoformat() | e }}</published>
      <title>{{ post_metadata.title | e }}</title>
      <updated>{{ post_metadata.published.isoformat() | e }}</updated>
    </entry>
  {% endcall %}
{% endmacro %}
