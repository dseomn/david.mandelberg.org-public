{#
 # SPDX-FileCopyrightText: 2025 David Mandelberg <david@mandelberg.org>
 #
 # SPDX-License-Identifier: Apache-2.0
 #}

{% set headings = ginjarator.py.import_("dseomn_website.headings") %}
{% set metadata = ginjarator.py.import_("dseomn_website.metadata") %}

{% import "include/base_html.html.jinja" as base_html %}

{% macro standalone(
  extra_head=""
) %}
  {% set standalone_metadata = metadata.Standalone.load(
    ginjarator.current_template
  ) %}
  {% set fragment %}
    <article class="article">
      <h1>{{ standalone_metadata.title | e }}</h1>
      {{ caller() }}
    </article>
  {% endset %}
  {% call base_html.write(
    page_metadata=standalone_metadata,
    extra_head=extra_head,
  ) %}
    {{ headings.article(fragment) }}
  {% endcall %}
{% endmacro %}

{% macro _post_fragment(
  post_metadata,
  link,
  contents
) %}
  <article class="article" id="{{ post_metadata.id | e }}">
    <header class="article-header">
      <h1 class="article-header-title">
        {% if link is none %}
          {{ post_metadata.title | e }}
        {% else %}
          <a rel="bookmark" href="{{ link | e }}">
            {{ post_metadata.title | e }}
          </a>
        {% endif %}
      </h1>
      <dl class="article-header-metadata">
        <div class="article-header-metadata-item">
          <dt class="article-header-metadata-key">
            <span aria-label="date" role="img">üìÖ</span>
          </dt>
          <dd
              class="article-header-metadata-value
                     article-header-metadata-numeric"
              >
            <time>{{ post_metadata.published | e }}</time>
          </dd>
        </div>
        <div class="article-header-metadata-item">
          <dt class="article-header-metadata-key">
            <span aria-label="author" role="img">üë§</span>
          </dt>
          <dd  class="article-header-metadata-value">
            {{ post_metadata.author | e }}
          </dd>
        </div>
        {% if post_metadata.tags %}
          <div class="article-header-metadata-item">
            <dt class="article-header-metadata-key">
              <span aria-label="tags" role="img">üè∑Ô∏è</span>
            </dt>
            <dd class="article-header-metadata-value">
              {% set tag_joiner = joiner(", ") %}
              {% for tag in post_metadata.tags -%}
                {{- tag_joiner() -}}
                <a href="/tag/{{ tag | e }}/" rel="tag">{{ tag | e }}</a>
              {%- endfor %}
            </dd>
          </div>
        {% endif %}
      </dl>
    </header>
    {{ contents }}
  </article>
{% endmacro %}

{% macro post() %}
  {% set post_metadata = metadata.Post.load(ginjarator.current_template) %}
  {% set extra_head %}
    <meta
        property="article:published_time"
        content="{{ post_metadata.published.isoformat() | e }}"
        >
    {% for tag in post_metadata.tags %}
      <meta property="article:tag" content="{{ tag | e }}">
    {% endfor %}
    <meta property="og:type" content="article">
  {% endset %}
  {% set contents = caller() %}
  {% call base_html.write(
    page_metadata=post_metadata,
    extra_head=extra_head,
  ) %}
    {{ headings.article(
      _post_fragment(
        post_metadata=post_metadata,
        link=none,
        contents=contents,
      ),
    ) }}
  {% endcall %}
  {% do ginjarator.fs.write_text(
    post_metadata.include_fragment_path,
    headings.article(
      _post_fragment(
        post_metadata=post_metadata,
        link=post_metadata.url_path,
        contents=contents,
      ),
      offset=1,
    ),
  ) %}
  {% call ginjarator.fs.write_text_macro(post_metadata.atom_fragment_path) %}
    <entry>
      <author><name>{{ post_metadata.author | e }}</name></author>
      {% for tag in post_metadata.tags %}
        <category term="{{ tag | e }}"/>
      {% endfor %}
      <content type="html">
        {{- base_html.minify(contents) | e -}}
      </content>
      <id>{{ post_metadata.uuid.urn | e }}</id>
      <link href="{{ post_metadata.url_path | e }}" rel="alternate"/>
      <published>{{ post_metadata.published.isoformat() | e }}</published>
      <title>{{ post_metadata.title | e }}</title>
      <updated>{{ post_metadata.published.isoformat() | e }}</updated>
    </entry>
  {% endcall %}
{% endmacro %}
