{#
 # SPDX-FileCopyrightText: 2025 David Mandelberg <david@mandelberg.org>
 #
 # SPDX-License-Identifier: Apache-2.0
 #}

{% set json = ginjarator.py.import_("json") %}

{% set paths = ginjarator.py.import_("dseomn_website.paths") %}

{% import "include/layout.jinja" as layout %}

{#
 # Map from image use case to the conversions that should be done to the image.
 #
 # For use cases that have a default conversion, that default is listed first.
 #
 # For use cases that should use different conversions based on the original
 # file type, the lossy conversions are used if the original is lossy, and the
 # lossless conversions are used if the original is lossless.
 #
 # Favicon sizes are from
 # https://blog.hubspot.com/website/what-is-a-favicon#size
 #
 # Main is for images that take the full width of an article.
 #}
{% set image_profiles = {
  "favicon": (
    "16x16.png",
    "32x32.png",
    "96x96.png",
    "180x180.png",
    "300x300.png",
    "512x512.png",
  ),
  "main": {
    "lossy": (
      "960x960q90.jpg",
      "480x480q90.jpg",
      "1920x1920q90.jpg",
    ),
  },
} %}

{% set _image_profile_sizes = {
  "main": ", ".join(
    (
      (
        "(width <= calc(" + layout.main_column_max_inline_size + " - 2 * " +
        layout.main_column_padding_inline + ")) calc(100vw - 2 * " +
        layout.main_column_padding_inline + ")"
      ),
      (
        "calc(" + layout.main_column_max_inline_size + " - 2 * " +
        layout.main_column_padding_inline + ")"
      ),
    )
  ),
} %}

{% macro image_profile_type(original_filename) %}
  {%- if original_filename.endswith((".jpg",)) -%}
    lossy
  {%- else -%}
    {%- do ginjarator.py.assert_(false, original_filename) -%}
  {%- endif -%}
{% endmacro %}

{% macro image_filename(original_filename, conversion) -%}
  {%- set without_private = original_filename.removeprefix("../private/") -%}
  {%- set without_suffix, _ = without_private.rsplit(".", 1) -%}
  work/{{ without_suffix }}-{{ conversion }}
{%- endmacro %}

{#
 # For each converted output, calls the caller back with the url path and
 # metadata.
 #}
{% macro image_for_each(original_filename, conversions) %}
  {% for conversion in conversions %}
    {% set work_filename = image_filename(
      original_filename,
      conversion=conversion,
    ) %}
    {% set metadata_json = ginjarator.fs.read_text(work_filename + ".json") %}
    {% set out_filename = ginjarator.fs.read_text(
      work_filename + ".cache-buster",
    ) %}
    {% if metadata_json is not none and out_filename is not none %}
      {{ caller(
        url_path=paths.to_url_path(out_filename),
        metadata=json.loads(metadata_json),
      ) }}
    {% endif %}
  {% endfor %}
{% endmacro %}

{% macro image_html(original_filename, profile, class="") -%}
  {%- set images = [] -%}
  {%- call(url_path, metadata) image_for_each(
    original_filename,
    conversions=image_profiles[profile][image_profile_type(original_filename)],
  ) -%}
    {%- do images.append(dict(url_path=url_path, metadata=metadata)) -%}
  {%- endcall -%}
  {%- if images -%}
    <img
        class="image-{{ profile | e }} {{ class | e }}"
        height="{{ images[0].metadata.geometry.height | e }}"
        sizes="{{ _image_profile_sizes[profile] | e }}"
        src="{{ images[0].url_path | e }}"
        srcset="
          {%- set srcset_joiner = joiner(", ") -%}
          {%- for image in images -%}
            {{- srcset_joiner() -}}
            {{ image.url_path | e }} {{ image.metadata.geometry.width | e }}w
          {%- endfor -%}
        "
        width="{{ images[0].metadata.geometry.width | e }}"
        {% for attribute, value in kwargs.items() %}
          {{ attribute }}="{{ value | e }}"
        {% endfor %}
        >
  {%- endif -%}
{%- endmacro %}

{% set favicon = "../private/media/P1230630-raw-crop-square.jpg" %}
